##################################################Типы полей:#################################################

1)############################################################################################################
CharField: Строковое поле с ограничением по длине.

Code:
	from django.db import models

	class MyModel(models.Model):
    		my_field = models.CharField(max_length=100)

2)############################################################################################################
IntegerField: Целочисленное поле.

Code:
	from django.db import models

	class MyModel(models.Model):
    		my_field = models.IntegerField()

3)############################################################################################################
DateField: Поле для хранения даты.

Code:
	from django.db import models

	class MyModel(models.Model):
    		my_field = models.DateField()

4)############################################################################################################
ForeignKey: Внешний ключ для связи с другой моделью.

Code:
	from django.db import models

	class Author(models.Model):
    		name = models.CharField(max_length=100)

	class Book(models.Model):
    		title = models.CharField(max_length=100)
    		author = models.ForeignKey(Author, on_delete=models.CASCADE)


###################################################P.S##########################################################
Когда вы определяете модели, Django может автоматически создавать соответствующую схему базы данных. Вы можете использовать 
команды makemigrations и migrate для создания и применения миграций, которые обновляют базу данных в соответствии с вашими моделями.



5)############################################################################################################
DateTimeField: Поле для хранения даты и времени.
Code:
	my_datetime_field = models.DateTimeField()

6)############################################################################################################
BooleanField: Поле для хранения булевых значений (True/False).
Code:
	my_bool_field = models.BooleanField(default=False)

7)############################################################################################################
FloatField: Поле для хранения чисел с плавающей запятой.
Code:
	my_float_field = models.FloatField()

8)############################################################################################################
ImageField: Поле для загрузки изображений.
Code:
	my_image_field = models.ImageField(upload_to='images/')


####################################################Виды связей:##############################################

9)############################################################################################################
OneToOneField: Одна к одной связь между двумя моделями.

Code:
	class UserProfile(models.Model):
    		user = models.OneToOneField(User, on_delete=models.CASCADE)

10)############################################################################################################
ManyToManyField: Многие ко многим связь между двумя моделями.

Code:
	class Tag(models.Model):
    		name = models.CharField(max_length=50)

	class Article(models.Model):
    		tags = models.ManyToManyField(Tag)


11)############################################################################################################
GenericForeignKey: Обобщенный внешний ключ, который позволяет связывать модель с объектами разных типов.

Code:
	from django.contrib.contenttypes.fields import GenericForeignKey
	from django.contrib.contenttypes.models import ContentType

	class Comment(models.Model):
    		content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    		object_id = models.PositiveIntegerField()
    		content_object = GenericForeignKey('content_type', 'object_id')

#####################################################Опции полей:#############################################

12)############################################################################################################
null: Определяет, может ли поле содержать значение NULL в базе данных.
Code:
	my_field = models.CharField(max_length=100, null=True)

13)############################################################################################################
blank: Определяет, может ли поле быть пустым при валидации форм в Django.
Code:
	my_field = models.CharField(max_length=100, blank=True)

14)############################################################################################################
choices: Позволяет определить ограниченный набор возможных значений для поля.
Code:
	GENDER_CHOICES = [
    	('M', 'Male'),
	('F', 'Female'),
	]
	gender = models.CharField(max_length=1, choices=GENDER_CHOICES)

#####################################################Методы моделей:############################################

15)############################################################################################################
str: Метод, который возвращает строковое представление объекта. Используется, например, при выводе в консоли или в админке Django.

Code:
	def __str__(self):
		return self.title

16)############################################################################################################
save: Метод, вызываемый при сохранении объекта в базе данных. Позволяет выполнять дополнительные действия перед сохранением.

Code:
	def save(self, *args, **kwargs):
    		# Ваш код
    		super().save(*args, **kwargs)

17)############################################################################################################

get_absolute_url: Метод, который возвращает URL для конкретного экземпляра модели. Часто используется в представлениях.

Code:
	def get_absolute_url(self):
    		return reverse('detail-view-name', args=[str(self.id)])

#####################################################Метаданные моделей:########################################

18)############################################################################################################
ordering: Определяет порядок сортировки для запросов базы данных.

Code:
	class Meta:
    		ordering = ['date_published']

19)############################################################################################################
verbose_name и verbose_name_plural: Позволяют задать человекочитаемые имена модели в единственном и множественном числе соответственно.

Code:
	class Meta:
    		verbose_name = 'Статья'
    		verbose_name_plural = 'Статьи'



##############################################################################################################
##############################################################################################################
##############################################################################################################
##############################################################################################################
Приведенные ранее примеры представляют собой основные концепции и возможности моделей в Django, но не охватывают все 
детали и функции. Есть и другие аспекты, которые могут быть полезны в разработке с использованием Django. Например:

Сигналы (Signals): Django предоставляет систему сигналов, которая позволяет привязывать функции (обработчики) к определенным событиям, происходящим с моделями.

Менеджеры (Managers): Менеджеры предоставляют интерфейс для выполнения запросов к базе данных и могут быть настроены для предоставления дополнительной функциональности.

Абстрактные модели (Abstract Models): Вы можете создавать абстрактные модели, которые содержат общую информацию, а затем наследовать их в других моделях.

Валидация моделей (Model Validation): Django предоставляет возможность определения метода clean для валидации данных модели перед сохранением.

Множественные базы данных (Multiple Databases): В Django можно настроить работу с несколькими базами данных.

Интеграция с ORM (Object-Relational Mapping): ORM Django предоставляет богатый набор инструментов для работы с базой данных, представляя ее в виде объектов Python.

Интеграция с административным интерфейсом (Admin Interface): Django предоставляет возможность легко создавать административные интерфейсы для управления данными в базе.